[{"C:\\Users\\BC\\Desktop\\tedarik\\src\\main.ts":"1","C:\\Users\\BC\\Desktop\\tedarik\\src\\App.vue":"2","C:\\Users\\BC\\Desktop\\tedarik\\src\\types\\Store.ts":"3","C:\\Users\\BC\\Desktop\\tedarik\\src\\types\\Types.ts":"4"},{"size":93,"mtime":1745932118000,"results":"5","hashOfConfig":"6"},{"size":27480,"mtime":1745946718878,"results":"7","hashOfConfig":"6"},{"size":58,"mtime":1745933940000,"results":"8","hashOfConfig":"6"},{"size":1589,"mtime":1745945440965,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jx521y",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":28,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\BC\\Desktop\\tedarik\\src\\main.ts",[],"C:\\Users\\BC\\Desktop\\tedarik\\src\\App.vue",["19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54"],"<script lang=\"ts\">\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry'; // <-- worker'ı import et\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\nimport axios from 'axios';\r\nimport { type CertificateInfo, type SignerAppResetResult, type SignerAppPingResult, type GetSignerAppVersionsResult, type SignStepTwoResult, type CreateStateOnOnaylarimApiResult, type FinishSignResult, HandleError, type DocumentInfo, type CreateStateOnOnaylarimApiRequest } from './types/Types';\r\nimport store from \"@/types/Store\";\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({\r\n  name: 'App',\r\n  data() {\r\n    return {\r\n      documentInfo: {\r\n        documentNumber: '000015231',\r\n        creationDate: '20.03.2024',\r\n        documentType: 'Satın Alma Sözleşmesi'\r\n      } as DocumentInfo,\r\n      certificateInfo: null as CertificateInfo | null,\r\n      currentPage: 1,\r\n      totalPages: 0,\r\n      scale: 1.5,\r\n      certificates: [] as CertificateInfo[],\r\n      showPinDialog: false,\r\n      selectedCertificate: null as CertificateInfo | null,\r\n      pin: '',\r\n      workingUrl: '',\r\n      loading: false,\r\n      error: null as string | null,\r\n      waitString: '',\r\n      operationId: '',\r\n      selectedFile: null as File | null,\r\n      selectedSignatureType: { id: 'pades', title: 'Pades' },\r\n      useEnvelopingSignature: false,\r\n      upgradeToLtv: false,\r\n      logs: [] as string[],\r\n      pdfDocument: null as any,\r\n      localSignerMode: '',\r\n      getSignerAppVersionsResult: {} as GetSignerAppVersionsResult,\r\n      signerAppResetResult: null as SignerAppResetResult | null,\r\n      signatureTypes: [\r\n        { id: 'pades', title: 'Pades' },\r\n        { id: 'cades', title: 'Cades' },\r\n        { id: 'xades', title: 'Xades' }\r\n      ]\r\n    }\r\n  },\r\n  mounted() {\r\n    this.pdfDocument = null;\r\n    this.loadPDF();\r\n    this.logs = [];\r\n    this.GetSignerAppVersions();\r\n  },\r\n  methods: {\r\n    async loadPDF(): Promise<void> {\r\n      try {\r\n        const response = await fetch('/sample.pdf');\r\n        const pdfBlob = await response.blob();\r\n        this.selectedFile = new File([pdfBlob], 'sample.pdf', { type: 'application/pdf' });\r\n\r\n        const loadingTask = pdfjsLib.getDocument('/sample.pdf');\r\n        const pdf = await loadingTask.promise;\r\n        \r\n        this.pdfDocument = pdf;\r\n        this.totalPages = pdf.numPages;\r\n\r\n        await this.renderPage(this.currentPage);\r\n      } catch (error) {\r\n        console.error('PDF yüklenirken hata oluştu:', error);\r\n      }\r\n    },\r\n\r\n    async renderPage(pageNumber: number): Promise<void> {\r\n      try {\r\n        const page = await this.pdfDocument.getPage(pageNumber);\r\n        const canvas = this.$refs.pdfCanvas as HTMLCanvasElement;\r\n        const context = canvas.getContext('2d');\r\n        \r\n        const viewport = page.getViewport({ scale: this.scale });\r\n        canvas.width = viewport.width;\r\n        canvas.height = viewport.height;\r\n\r\n        await page.render({\r\n          canvasContext: context,\r\n          viewport: viewport\r\n        }).promise;\r\n      } catch (error) {\r\n        console.error('Sayfa render edilirken hata oluştu:', error);\r\n      }\r\n    },\r\n\r\n    zoomIn() {\r\n      this.scale += 0.25;\r\n      this.renderPage(this.currentPage);\r\n    },\r\n\r\n    zoomOut() {\r\n      if (this.scale > 0.5) {\r\n        this.scale -= 0.25;\r\n        this.renderPage(this.currentPage);\r\n      }\r\n    },\r\n\r\n    async getCertificates(): Promise<void> {\r\n      this.loading = true;\r\n      this.error = null;\r\n      try {\r\n        const isConnected = await this.tryToConnect();\r\n        if (!isConnected) {\r\n          this.error = 'E-imza aracına bağlanılamadı';\r\n          return;\r\n        }\r\n        await this.resetSigner();\r\n      } catch (error) {\r\n        this.error = HandleError(error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    async tryToConnect(): Promise<boolean> {\r\n      try {\r\n        const httpsResult = await this.pingSignerApp(true, false);\r\n        if (httpsResult) {\r\n          this.workingUrl = 'https://localsigner.onaylarim.com:8099';\r\n          return true;\r\n        }\r\n\r\n        const httpResult = await this.pingSignerApp(false, false);\r\n        if (httpResult) {\r\n          this.workingUrl = 'http://localsigner.onaylarim.com:8099';\r\n          return true;\r\n        }\r\n\r\n        const localhostResult = await this.pingSignerApp(false, true);\r\n        if (localhostResult) {\r\n          this.workingUrl = 'http://localhost:8099';\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      } catch {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    async pingSignerApp(useHttps: boolean, useLocalhost: boolean): Promise<boolean> {\r\n      const url = `${useHttps ? 'https' : 'http'}://${useLocalhost ? 'localhost' : 'localsigner.onaylarim.com'}:8099/ping`;\r\n      try {\r\n        const response = await axios.get(url, { timeout: 500 });\r\n        return !response.data.error;\r\n      } catch {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    async resetSigner(): Promise<void> {\r\n      try {\r\n        const response = await axios.get(`${this.workingUrl}/reset`);\r\n        const result = response.data as SignerAppResetResult;\r\n        if (result.error) {\r\n          this.error = result.error;\r\n          return;\r\n        }\r\n        this.certificates = result.certificates;\r\n        if (this.certificates.length > 0) {\r\n          this.selectedCertificate = this.certificates[0];\r\n          this.showPinDialog = true;\r\n        }\r\n      } catch (error) {\r\n        this.error = HandleError(error);\r\n      }\r\n    },\r\n\r\n    selectCertificate(certificate: CertificateInfo): void {\r\n      this.selectedCertificate = certificate;\r\n      this.showPinDialog = true;\r\n    },\r\n\r\n    async signDocument(): Promise<void> {\r\n      if (!this.selectedCertificate) {\r\n        await this.getCertificates();\r\n        return;\r\n      }\r\n      \r\n      if (!this.pin) {\r\n        this.error = 'Lütfen PIN giriniz';\r\n        return;\r\n      }\r\n\r\n      this.loading = true;\r\n      this.error = null;\r\n      this.waitString = 'İmza işlemi hazırlanıyor...';\r\n\r\n      try {\r\n        this.operationId = \"\";\r\n        \r\n        const createStateOnOnaylarimApiRequest: CreateStateOnOnaylarimApiRequest = {\r\n           certificate: this.selectedCertificate!.data!, // non-null assertion (!)\r\n          signatureType: this.selectedSignatureType.id\r\n          };\r\n\r\n\r\n        if(this.useEnvelopingSignature === true){\r\n          createStateOnOnaylarimApiRequest.xmlSignatureType = 2;\r\n        }\r\n\r\n        this.waitString = \"İmza işlemi hazırlanıyor.\";\r\n        this.logs.push(\"Sizin sunucu katmanına CreateStateOnOnaylarimApi isteği gönderiliyor.\");\r\n        \r\n        const createStateResponse = await axios.post(\r\n          store.API_URL + \"/Onaylarim/CreateStateOnOnaylarimApi\", \r\n          createStateOnOnaylarimApiRequest,\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n\r\n        this.logs.push(\"Sizin sunucu katmanına CreateStateOnOnaylarimApi isteği gönderildi. Detaylar için console'a bakınız.\");\r\n        console.log(\"Sizin sunucu katmanına CreateStateOnOnaylarimApi isteği gönderildi.\", createStateResponse);\r\n\r\n        this.waitString = \"İmza işlemi başladı.\";\r\n        const createStateResult = createStateResponse.data as CreateStateOnOnaylarimApiResult;\r\n        console.log(\"createStateOnOnaylarimApiResult\", createStateResult);\r\n\r\n        if (createStateResult.error !== undefined && createStateResult.error !== null && createStateResult.error.length > 0) {\r\n          this.logs.push(\"Sizin sunucu katmanına CreateStateOnOnaylarimApi isteği hata döndü. Hata: \" + createStateResult.error);\r\n          return;\r\n        }\r\n\r\n        const signStepTwoRequest = {\r\n          keyId: createStateResult.keyID,\r\n          keySecret: createStateResult.keySecret,\r\n          state: createStateResult.state,\r\n          pkcsLibrary: this.selectedCertificate.pkcsLibrary,\r\n          slot: this.selectedCertificate.slot,\r\n          pin: this.pin,\r\n        };\r\n\r\n        this.logs.push(\"e-İmza aracına SIGNSTEPTWO isteği gönderiliyor.\");\r\n        const signStepTwoResponse = await axios.post(\r\n          this.workingUrl + \"/signStepTwo\", \r\n          JSON.stringify(signStepTwoRequest),\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            },\r\n          }\r\n        );\r\n\r\n        const signStepTwoResult = signStepTwoResponse.data as SignStepTwoResult;\r\n        if (signStepTwoResult.error !== undefined && signStepTwoResult.error !== null) {\r\n          if (signStepTwoResult.error.search(\"INCORRECT_PIN\") >= 0) {\r\n            this.logs.push(\"e-İmza aracına SIGNSTEPTWO isteği hata döndü. Detaylar için console'a bakınız.\");\r\n            console.log(\"e-İmza aracına SIGNSTEPTWO isteği sonucu.\", signStepTwoResult);\r\n            this.waitString = \"Hata oluştu. \" + \"e-İmza şifreniz yanlış.\";\r\n          } else if (signStepTwoResult.error.search(\"PIN_BLOCKED\") >= 0) {\r\n            this.logs.push(\"e-İmza aracına SIGNSTEPTWO isteği hata döndü. Detaylar için console'a bakınız.\");\r\n            console.log(\"e-İmza aracına SIGNSTEPTWO isteği sonucu.\", signStepTwoResult);\r\n            this.waitString = \"Hata oluştu. \" + \"e-İmza şifreniz blokeli.\";\r\n          } else {\r\n            this.logs.push(\"e-İmza aracına SIGNSTEPTWO isteği hata döndü. Detaylar için console'a bakınız.\");\r\n            console.log(\"e-İmza aracına SIGNSTEPTWO isteği sonucu.\", signStepTwoResult);\r\n            this.waitString = \"Hata oluştu. \" + signStepTwoResult.error;\r\n          }\r\n        } else {\r\n          if (signStepTwoResult.error) {\r\n            this.logs.push(\"e-İmza aracına SIGNSTEPTWO isteği hata döndü. Detaylar için console'a bakınız.\");\r\n            console.log(\"e-İmza aracına SIGNSTEPTWO isteği sonucu.\", signStepTwoResult);\r\n            this.waitString = \"Hata oluştu. \" + signStepTwoResult.error;\r\n          } else {\r\n            this.logs.push(\"e-İmza aracına SIGNSTEPTWO isteği başarıyla tamamlandı.\");\r\n            \r\n            const finishSignRequest = {\r\n              keyId: createStateResult.keyID,\r\n              keySecret: createStateResult.keySecret,\r\n              signedData: signStepTwoResult.signedData,\r\n              operationId: createStateResult.operationId,\r\n              signatureType: this.selectedSignatureType.id,\r\n              dontUpgradeToLtv: !this.upgradeToLtv,\r\n            };\r\n\r\n            this.logs.push(\"Sizin sunucu katmanına FinishSign isteği gönderiliyor.\");\r\n            const finishSignResponse = await axios.post(\r\n              store.API_URL + \"/Onaylarim/FinishSign\", \r\n              finishSignRequest,\r\n              {\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                }\r\n              }\r\n            );\r\n\r\n            this.logs.push(\"Sizin sunucu katmanına FinishSign isteği gönderildi. Detaylar için console'a bakınız.\");\r\n            console.log(\"Sizin sunucu katmanına FinishSign isteği gönderildi.\", createStateResponse);\r\n            \r\n            const finishSignResult = finishSignResponse.data as FinishSignResult;\r\n            if (finishSignResult.isSuccess) {\r\n              this.logs.push(\"Sizin sunucu katmanına FinishSign istiği sonucu: İşlem başarılı.\");\r\n              this.waitString = \"İmza işlemi tamamlandı.\";\r\n              this.operationId = createStateResult.operationId;\r\n            } else {\r\n              this.logs.push(\"Sizin sunucu katmanına FinishSign istiği sonucu: İşlem başarısız.\");\r\n              this.waitString = \"İmza işlemi tamamlanamadı.\";\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        this.error = HandleError(error);\r\n        this.waitString = '';\r\n        console.error('İmza işlemi sırasında hata:', error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    async downloadSignedFile(): Promise<void> {\r\n      if (!this.operationId) return;\r\n\r\n      try {\r\n        const response = await axios.get(\r\n          store.API_URL + \"/Onaylarim/DownloadSignedFileFromOnaylarimApi?operationId=\" + this.operationId,\r\n          { responseType: \"blob\" }\r\n        );\r\n\r\n        let filename = \"imzali_dosya.pdf\";\r\n        const contentDisposition = response.headers[\"Content-Disposition\"];\r\n        if (contentDisposition) {\r\n          const match = contentDisposition.match(/filename[^;\\n]*=(UTF-\\d['\"]*)?((['\"]).*?[.]$\\2|[^;\\n]*)?/gi);\r\n          if (match && match[1]) {\r\n            const a1 = match[1].split(\"''\")[1];\r\n            if (a1) {\r\n              filename = decodeURI(a1);\r\n            }\r\n          }\r\n        }\r\n\r\n        const fileURL = window.URL.createObjectURL(new Blob([response.data]));\r\n        const fileLink = document.createElement(\"a\");\r\n        fileLink.href = fileURL;\r\n        fileLink.setAttribute(\"download\", filename);\r\n        document.body.appendChild(fileLink);\r\n        fileLink.click();\r\n      } catch (error) {\r\n        this.error = HandleError(error);\r\n      }\r\n    },\r\n\r\n    GetSignerAppVersions() {\r\n      this.logs.push(\"e-İmza aracı son sürümü alınıyor.\");\r\n      axios\r\n        .get(\"https://apitest.onaylarim.com/sign/GetSignerAppVersions\")\r\n        .then((result) => {\r\n          if (result.data.error) {\r\n            this.logs.push(\"Uygulama güncel sürümü alınırken hata oluştu. Detaylar için console'a bakınız.\");\r\n            console.log(\"Uygulama güncel sürümü alınırken hata oluştu.\", result);\r\n          } else {\r\n            this.getSignerAppVersionsResult = result.data.result as GetSignerAppVersionsResult;\r\n            this.logs.push(\"Uygulama güncel sürümü alındı. Detaylar için console'a bakınız.\");\r\n            console.log(\"Uygulama güncel sürümü.\", this.getSignerAppVersionsResult);\r\n          }\r\n        })\r\n        .catch(async (error) => {\r\n          this.logs.push(\"Uygulama güncel sürümü alınırken hata oluştu. Detaylar için console'a bakınız.\");\r\n          console.log(\"Uygulama güncel sürümü alınırken hata oluştu. \", error);\r\n        });\r\n    },\r\n\r\n    OpenSignerApp() {\r\n      try {\r\n        window.location.href = 'onaylarimsignerapp:\"start\"';\r\n        this.TryToConnect();\r\n      } catch (err) {\r\n        console.log(\"open signer app error.\", err);\r\n      }\r\n    },\r\n\r\n    async TryToConnect() {\r\n      const httpsTryIsOk = await this.LocalSignerPing(true, false);\r\n      if (httpsTryIsOk) {\r\n        this.workingUrl = \"https://localsigner.onaylarim.com:8099\";\r\n        this.LocalSignerReset();\r\n      } else {\r\n        const httpTryIsOk = await this.LocalSignerPing(false, false);\r\n        if (httpTryIsOk) {\r\n          this.workingUrl = \"http://localsigner.onaylarim.com:8099\";\r\n          this.LocalSignerReset();\r\n        } else {\r\n          const httpTryWithLocalhostIsOk = await this.LocalSignerPing(false, true);\r\n          if (httpTryWithLocalhostIsOk) {\r\n            this.workingUrl = \"http://localhost:8099\";\r\n            this.LocalSignerReset();\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    async LocalSignerPing(useHttps: boolean, useLocalhost: boolean): Promise<boolean> {\r\n      const url = (useHttps ? \"https\" : \"http\") + (useLocalhost ? \"://localhost:8099/ping\" : \"://localsigner.onaylarim.com:8099/ping\");\r\n\r\n      this.logs.push(\"e-İmza aracına \" + (useHttps ? \"SSL\" : \"HTTP\") + \" PING isteği gönderiliyor. Url: \" + url);\r\n      try {\r\n        const axiosResponse = await axios.get(url, { timeout: 500 });\r\n        this.logs.push(\"e-İmza aracına \" + (useHttps ? \"SSL\" : \"HTTP\") + \" PING isteği döndü. Detaylar için console'a bakınız.\");\r\n        console.log(\"e-İmza aracına \" + (useHttps ? \"SSL\" : \"HTTP\") + \" PING isteğ sonucu.\", axiosResponse);\r\n        const signerAppPingResult = axiosResponse.data as SignerAppPingResult;\r\n        if (signerAppPingResult.error === undefined || signerAppPingResult.error === null || signerAppPingResult.error.length === 0) {\r\n          return true;\r\n        }\r\n        return false;\r\n      } catch (error: any) {\r\n        this.logs.push(\"e-İmza aracına \" + (useHttps ? \"SSL\" : \"HTTP\") + \" PING isteği gönderilemedi. Mesaj: \" + HandleError(error) + \" Detaylar için console'a bakınız.\");\r\n        console.log(\"e-İmza aracına \" + (useHttps ? \"SSL\" : \"HTTP\") + \" PING isteği gönderilemedi.\", error);\r\n        this.localSignerMode = \"baglantiKurulamadı\";\r\n        return false;\r\n      }\r\n    },\r\n\r\n    LocalSignerReset() {\r\n      this.signerAppResetResult = null;\r\n      this.operationId = \"\";\r\n      this.localSignerMode = \"working\";\r\n      this.waitString = \"\";\r\n      this.logs.push(\"e-İmza aracına \" + this.workingUrl + \" RESET isteği gönderiliyor. \");\r\n      axios\r\n        .get(this.workingUrl + \"/reset\")\r\n        .then((result) => {\r\n          this.logs.push(\"e-İmza aracına \" + this.workingUrl + \" RESET isteği döndü. Detaylar için console'a bakınız.\");\r\n          console.log(\"e-İmza aracına \" + this.workingUrl + \" RESET isteğ sonucu.\", result);\r\n          this.signerAppResetResult = result.data as SignerAppResetResult;\r\n          if (this.signerAppResetResult?.signerAppStatus === 1) {\r\n            let counter = 0;\r\n            while (counter < 10) {\r\n              axios.get(this.workingUrl + \"/ping\").then((result) => {\r\n                const signerAppPingResult = result.data as SignerAppPingResult;\r\n                if (signerAppPingResult.signerAppStatus !== 1) {\r\n                  counter = 10;\r\n                }\r\n              });\r\n              counter++;\r\n            }\r\n          }\r\n          let desiredVersion = 0;\r\n          if (this.signerAppResetResult?.signerAppPlatform === \"windows\") {\r\n            desiredVersion = this.getSignerAppVersionsResult.signerAppWindowsVersion;\r\n          } else if (this.signerAppResetResult?.signerAppPlatform === \"macos\") {\r\n            desiredVersion = this.getSignerAppVersionsResult.signerAppMacVersion;\r\n          } else if (this.signerAppResetResult?.signerAppPlatform === \"linux\") {\r\n            desiredVersion = this.getSignerAppVersionsResult.signerAppLinuxVersion;\r\n          } else if (this.signerAppResetResult?.signerAppPlatform === \"freebsd\") {\r\n            desiredVersion = this.getSignerAppVersionsResult.signerAppFreebsdVersion;\r\n          }\r\n          if (this.signerAppResetResult?.signerAppDllVersion && this.signerAppResetResult.signerAppDllVersion < desiredVersion) {\r\n            this.localSignerMode = \"varAncakVersiyonEski\";\r\n            return;\r\n          } else {\r\n            this.localSignerMode = \"varVeVersiyonYeni\";\r\n            this.selectedCertificate = null;\r\n            if (this.signerAppResetResult?.certificates && this.signerAppResetResult.certificates.length === 1) {\r\n              this.selectedCertificate = this.signerAppResetResult.certificates[0];\r\n            }\r\n            return;\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          this.logs.push(\"e-İmza aracına \" + this.workingUrl + \" RESET isteği gönderilemedi. Mesaj: \" + HandleError(error) + \" Detaylar için console'a bakınız.\");\r\n          console.log(\"e-İmza aracına \" + this.workingUrl + \" RESET isteği gönderilemedi.\", error);\r\n          this.localSignerMode = \"baglantiKurulamadı\";\r\n        })\r\n        .finally(() => {\r\n          this.logs.push(\"e-İmza aracına durumu \" + this.workingUrl + \" : \" + this.localSignerMode);\r\n        });\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"header\">\r\n      <h1>Tedarikçi Sözleşme İmzalama Platformu</h1>\r\n    </div>\r\n    <div class=\"main-content\">\r\n      <div class=\"pdf-viewer\">\r\n        <div class=\"pdf-container\">\r\n          <canvas ref=\"pdfCanvas\"></canvas>\r\n        </div>\r\n      </div>\r\n      <div class=\"sidebar\">\r\n        <div class=\"metadata\">\r\n          <h3>Belge Bilgileri</h3>\r\n          <div class=\"metadata-item\">\r\n            <span class=\"metadata-label\">Belge No:</span>\r\n            <span>{{ documentInfo.documentNumber }}</span>\r\n          </div>\r\n          <div class=\"metadata-item\">\r\n            <span class=\"metadata-label\">Oluşturulma Tarihi:</span>\r\n            <span>{{ documentInfo.creationDate }}</span>\r\n          </div>\r\n          <div class=\"metadata-item\">\r\n            <span class=\"metadata-label\">Belge Türü:</span>\r\n            <span>{{ documentInfo.documentType }}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"signature-section\">\r\n          <h3>İmzalama</h3>\r\n          <div v-if=\"error\" class=\"error-message\">{{ error }}</div>\r\n          <div v-if=\"loading\" class=\"loading-message\">{{ waitString }}</div>\r\n          \r\n          <div v-if=\"!showPinDialog\">\r\n            <button @click=\"signDocument\" class=\"sign-btn\" :disabled=\"loading\">\r\n              Belgeyi İmzala\r\n            </button>\r\n          </div>\r\n\r\n          <div v-else class=\"pin-dialog\">\r\n            <div class=\"metadata-item\">\r\n              <span class=\"metadata-label\">Sertifika Sahibi:</span>\r\n              <span>{{ selectedCertificate?.personFullname }}</span>\r\n            </div>\r\n            <div class=\"metadata-item\">\r\n              <span class=\"metadata-label\">TC Kimlik No:</span>\r\n              <span>{{ selectedCertificate?.citizenshipNo }}</span>\r\n            </div>\r\n            <div class=\"metadata-item\">\r\n              <span class=\"metadata-label\">Geçerlilik:</span>\r\n              <span>{{ selectedCertificate?.validTo }}</span>\r\n            </div>\r\n            <div class=\"pin-input\">\r\n              <label for=\"pin\">PIN Kodu:</label>\r\n              <input type=\"password\" id=\"pin\" v-model=\"pin\" placeholder=\"PIN kodunuzu girin\" :disabled=\"loading\" />\r\n            </div>\r\n            <div class=\"pin-actions\">\r\n              <button @click=\"signDocument\" class=\"sign-btn\" :disabled=\"loading\">İmzala</button>\r\n              <button @click=\"showPinDialog = false; selectedCertificate = null\" class=\"cancel-btn\" :disabled=\"loading\">İptal</button>\r\n            </div>\r\n          </div>\r\n\r\n          <div v-if=\"operationId\" class=\"download-section\">\r\n            <button @click=\"downloadSignedFile\" class=\"download-btn\">\r\n              İmzalı Dosyayı İndir\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 2rem 4rem;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.header {\r\n  background-color: #2c3e50;\r\n  color: white;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  border-radius: 12px;\r\n  margin-bottom: 3rem;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.header h1 {\r\n  font-size: 2.2rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.main-content {\r\n  flex: 1;\r\n  display: flex;\r\n  gap: 3rem;\r\n  padding: 0;\r\n  max-width: 1800px;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n}\r\n\r\n.pdf-viewer {\r\n  flex: 4;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  margin-bottom: 2rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 3rem;\r\n}\r\n\r\n.pdf-container {\r\n  position: relative;\r\n  width: 595.28px;\r\n  height: 841.89px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #ffffff;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n  margin: auto;\r\n}\r\n\r\ncanvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.sidebar {\r\n  flex: 1.5;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2.5rem;\r\n  min-width: 400px;\r\n}\r\n\r\n.metadata, .signature-section {\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  padding: 2.5rem;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.metadata h3, .signature-section h3 {\r\n  color: #2c3e50;\r\n  margin-bottom: 2rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 2px solid #eee;\r\n  font-size: 1.6rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.metadata-item {\r\n  margin-bottom: 1.8rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.75rem 0;\r\n}\r\n\r\n.metadata-label {\r\n  font-weight: 600;\r\n  color: #4a5568;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.sign-btn {\r\n  width: 100%;\r\n  padding: 1.5rem;\r\n  background-color: #27ae60;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-size: 1.4rem;\r\n  font-weight: 600;\r\n  transition: all 0.3s ease;\r\n  margin-top: 2rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.sign-btn:hover {\r\n  background-color: #2ecc71;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.certificate-info {\r\n  margin-top: 2rem;\r\n  padding: 2rem;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  border: 1px solid #e2e8f0;\r\n}\r\n\r\n.error-message {\r\n  color: #e74c3c;\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: #fdf1f0;\r\n  border-radius: 4px;\r\n}\r\n\r\n.loading-message {\r\n  color: #3498db;\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: #edf7fd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.certificates-list {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.certificate-item {\r\n  padding: 1rem;\r\n  border: 1px solid #eee;\r\n  border-radius: 8px;\r\n  margin-bottom: 1rem;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.certificate-item:hover {\r\n  background-color: #f8f9fa;\r\n  border-color: #27ae60;\r\n}\r\n\r\n.pin-dialog {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.pin-input {\r\n  margin: 1rem 0;\r\n}\r\n\r\n.pin-input label {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #4a5568;\r\n  font-weight: 600;\r\n}\r\n\r\n.pin-input input {\r\n  width: 100%;\r\n  padding: 0.75rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.pin-actions {\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.cancel-btn {\r\n  flex: 1;\r\n  padding: 1.5rem;\r\n  background-color: #e74c3c;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-size: 1.4rem;\r\n  font-weight: 600;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.cancel-btn:hover {\r\n  background-color: #c0392b;\r\n}\r\n\r\n.download-section {\r\n  margin-top: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.download-btn {\r\n  padding: 1rem 2rem;\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.download-btn:hover {\r\n  background-color: #2980b9;\r\n}\r\n\r\nbutton:disabled {\r\n  opacity: 0.7;\r\n  cursor: not-allowed;\r\n}\r\n\r\n@media (max-width: 1600px) {\r\n  .app-container {\r\n    padding: 2rem;\r\n  }\r\n\r\n  .main-content {\r\n    max-width: 1400px;\r\n  }\r\n\r\n  .sidebar {\r\n    min-width: 350px;\r\n  }\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .main-content {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .pdf-viewer {\r\n    padding: 2rem;\r\n  }\r\n  \r\n  .sidebar {\r\n    min-width: 100%;\r\n  }\r\n  \r\n  .pdf-container {\r\n    width: 100%;\r\n    height: auto;\r\n    aspect-ratio: 1 / 1.4142;\r\n  }\r\n\r\n  .metadata, .signature-section {\r\n    padding: 2rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .app-container {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .header {\r\n    padding: 1.5rem;\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  .header h1 {\r\n    font-size: 1.8rem;\r\n  }\r\n\r\n  .pdf-viewer {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .metadata, .signature-section {\r\n    padding: 1.5rem;\r\n  }\r\n}\r\n</style> ","C:\\Users\\BC\\Desktop\\tedarik\\src\\types\\Store.ts",[],"C:\\Users\\BC\\Desktop\\tedarik\\src\\types\\Types.ts",[],{"ruleId":"55","severity":1,"message":"56","line":199,"column":25,"nodeType":"57","messageId":"58","endLine":199,"endColumn":56},{"ruleId":"55","severity":1,"message":"56","line":199,"column":25,"nodeType":"57","messageId":"58","endLine":199,"endColumn":50,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":488,"column":11,"nodeType":"62","endLine":488,"endColumn":44,"fix":"63"},{"ruleId":"64","severity":1,"message":"65","line":509,"column":29,"nodeType":"66","endLine":509,"endColumn":50,"fix":"67"},{"ruleId":"68","severity":1,"message":"69","line":509,"column":51,"nodeType":"70","messageId":"71","endLine":509,"endColumn":51,"fix":"72"},{"ruleId":"68","severity":1,"message":"73","line":509,"column":62,"nodeType":"74","messageId":"75","endLine":509,"endColumn":62,"fix":"76"},{"ruleId":"64","severity":1,"message":"65","line":510,"column":31,"nodeType":"66","endLine":510,"endColumn":54,"fix":"77"},{"ruleId":"68","severity":1,"message":"69","line":510,"column":55,"nodeType":"70","messageId":"71","endLine":510,"endColumn":55,"fix":"78"},{"ruleId":"68","severity":1,"message":"73","line":510,"column":71,"nodeType":"74","messageId":"75","endLine":510,"endColumn":71,"fix":"79"},{"ruleId":"80","severity":1,"message":"81","line":513,"column":43,"nodeType":"66","endLine":513,"endColumn":59,"fix":"82"},{"ruleId":"64","severity":1,"message":"65","line":513,"column":43,"nodeType":"66","endLine":513,"endColumn":59,"fix":"83"},{"ruleId":"80","severity":1,"message":"84","line":513,"column":60,"nodeType":"66","endLine":513,"endColumn":79,"fix":"85"},{"ruleId":"64","severity":1,"message":"86","line":513,"column":60,"nodeType":"66","endLine":513,"endColumn":79},{"ruleId":"64","severity":1,"message":"65","line":518,"column":23,"nodeType":"66","endLine":518,"endColumn":41,"fix":"87"},{"ruleId":"60","severity":1,"message":"88","line":533,"column":15,"nodeType":"62","endLine":533,"endColumn":116,"fix":"89"},{"ruleId":"80","severity":1,"message":"90","line":533,"column":38,"nodeType":"66","endLine":533,"endColumn":46,"fix":"91"},{"ruleId":"64","severity":1,"message":"92","line":533,"column":38,"nodeType":"66","endLine":533,"endColumn":46,"fix":"93"},{"ruleId":"80","severity":1,"message":"94","line":533,"column":47,"nodeType":"66","endLine":533,"endColumn":60,"fix":"95"},{"ruleId":"64","severity":1,"message":"96","line":533,"column":47,"nodeType":"66","endLine":533,"endColumn":60},{"ruleId":"64","severity":1,"message":"97","line":533,"column":61,"nodeType":"66","endLine":533,"endColumn":93},{"ruleId":"64","severity":1,"message":"86","line":533,"column":94,"nodeType":"66","endLine":533,"endColumn":113},{"ruleId":"80","severity":1,"message":"81","line":536,"column":45,"nodeType":"66","endLine":536,"endColumn":61,"fix":"98"},{"ruleId":"64","severity":1,"message":"65","line":536,"column":45,"nodeType":"66","endLine":536,"endColumn":61,"fix":"99"},{"ruleId":"80","severity":1,"message":"84","line":536,"column":62,"nodeType":"66","endLine":536,"endColumn":81,"fix":"100"},{"ruleId":"64","severity":1,"message":"86","line":536,"column":62,"nodeType":"66","endLine":536,"endColumn":81},{"ruleId":"68","severity":1,"message":"101","line":536,"column":82,"nodeType":"70","messageId":"71","endLine":536,"endColumn":82,"fix":"102"},{"ruleId":"68","severity":1,"message":"103","line":536,"column":88,"nodeType":"74","messageId":"75","endLine":536,"endColumn":88,"fix":"104"},{"ruleId":"80","severity":1,"message":"81","line":537,"column":82,"nodeType":"66","endLine":537,"endColumn":100,"fix":"105"},{"ruleId":"64","severity":1,"message":"65","line":537,"column":82,"nodeType":"66","endLine":537,"endColumn":100,"fix":"106"},{"ruleId":"80","severity":1,"message":"84","line":537,"column":101,"nodeType":"66","endLine":537,"endColumn":120,"fix":"107"},{"ruleId":"64","severity":1,"message":"86","line":537,"column":101,"nodeType":"66","endLine":537,"endColumn":120},{"ruleId":"68","severity":1,"message":"101","line":537,"column":121,"nodeType":"70","messageId":"71","endLine":537,"endColumn":121,"fix":"108"},{"ruleId":"68","severity":1,"message":"103","line":537,"column":126,"nodeType":"74","messageId":"75","endLine":537,"endColumn":126,"fix":"109"},{"ruleId":"64","severity":1,"message":"65","line":541,"column":35,"nodeType":"66","endLine":541,"endColumn":59,"fix":"110"},{"ruleId":"80","severity":1,"message":"81","line":542,"column":49,"nodeType":"66","endLine":542,"endColumn":69,"fix":"111"},{"ruleId":"64","severity":1,"message":"65","line":542,"column":49,"nodeType":"66","endLine":542,"endColumn":69,"fix":"112"},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["113"],"vue/html-self-closing","Require self-closing on HTML elements (<canvas>).","VElement",{"range":"114","text":"115"},"vue/max-attributes-per-line","'class' should be on a new line.","VAttribute",{"range":"116","text":"117"},"vue/singleline-html-element-content-newline","Expected 1 line break after opening tag (`<div>`), but no line breaks found.","HTMLTagClose","unexpectedAfterClosingBracket",{"range":"118","text":"117"},"Expected 1 line break before closing tag (`</div>`), but no line breaks found.","HTMLEndTagOpen","unexpectedBeforeOpeningBracket",{"range":"119","text":"117"},{"range":"120","text":"117"},{"range":"121","text":"117"},{"range":"122","text":"117"},"vue/attributes-order","Attribute \"class\" should go before \"@click\".",{"range":"123","text":"124"},{"range":"125","text":"117"},"Attribute \":disabled\" should go before \"@click\".",{"range":"126","text":"127"},"':disabled' should be on a new line.",{"range":"128","text":"117"},"Disallow self-closing on HTML void elements (<input/>).",{"range":"129","text":"130"},"Attribute \"id\" should go before \"type\".",{"range":"131","text":"132"},"'id' should be on a new line.",{"range":"133","text":"117"},"Attribute \"v-model\" should go before \"type\".",{"range":"134","text":"135"},"'v-model' should be on a new line.","'placeholder' should be on a new line.",{"range":"136","text":"124"},{"range":"137","text":"117"},{"range":"138","text":"127"},"Expected 1 line break after opening tag (`<button>`), but no line breaks found.",{"range":"139","text":"117"},"Expected 1 line break before closing tag (`</button>`), but no line breaks found.",{"range":"140","text":"117"},{"range":"141","text":"142"},{"range":"143","text":"117"},{"range":"144","text":"145"},{"range":"146","text":"117"},{"range":"147","text":"117"},{"range":"148","text":"117"},{"range":"149","text":"150"},{"range":"151","text":"117"},{"messageId":"152","fix":"153","desc":"154"},[19615,19625],"/>",[20403,20404],"\n",[20426,20426],[20437,20437],[20474,20475],[20499,20499],[20515,20515],[20594,20632],"class=\"sign-btn\" @click=\"signDocument\"",[20615,20616],[20594,20652],":disabled=\"loading\" @click=\"signDocument\" class=\"sign-btn\"",[20749,20750],[21553,21555],">",[21461,21485],"id=\"pin\" type=\"password\"",[21476,21477],[21461,21499],"v-model=\"pin\" type=\"password\" id=\"pin\"",[21638,21676],[21659,21660],[21638,21696],[21697,21697],[21703,21703],[21736,21813],"class=\"cancel-btn\" @click=\"showPinDialog = false; selectedCertificate = null\"",[21794,21795],[21736,21833],":disabled=\"loading\" @click=\"showPinDialog = false; selectedCertificate = null\" class=\"cancel-btn\"",[21834,21834],[21839,21839],[21923,21924],[21971,22019],"class=\"download-btn\" @click=\"downloadSignedFile\"",[21998,21999],"suggestOptionalChain",{"range":"155","text":"156"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",[6315,6316],"?"]